{"version":3,"sources":["pages/register/register.js","App.js","serviceWorker.js","index.js"],"names":["RegisterComponent","validateForm","e","setState","firstError","lastError","emailError","passError","state","firstName","match","lastName","email","test","password","length","handleEnter","event","keyCode","handleChange","bind","evt","value","target","this","name","class","type","onKeyUp","onChange","className","onClick","src","href","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85ab94dd.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass RegisterComponent extends React.Component{\n    constructor(){\n        super();\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            firstName:'',\n            lastName:'',\n            email:'',\n            password:'',\n            firstError :'',\n            lastError:'',\n            emailError:'',\n            passError:''\n        }\n    }\n    validateForm = (e) =>{\n        this.setState({\n            firstError:'',\n            lastError:'',\n            emailError:'',\n            passError:''\n        })\n        if(this.state.firstName==''){\n           this.setState({firstError:'Please enter first Name'});\n        }\n        if(this.state.firstName){\n            if (!(this.state.firstName).match(/^[a-zA-Z]+$/)) {\n            this.setState({firstError:'Please enter valid first name'});\n            }\n        }\n        if(this.state.lastName==''){\n            this.setState({lastError:'Please enter last name'});\n        }\n        if(this.state.lastName){\n            if (!(this.state.lastName).match(/^[a-zA-Z]+$/)) {\n                this.setState({lastError:'Please enter valid last name'});\n            }\n        }\n        if(this.state.email==''){\n            this.setState({emailError:'Please enter email'});\n        }\n        if(this.state.email){\n            let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\n            if(reg.test(this.state.email) == false){\n                this.setState({emailError:'Please enter valid email'});\n            }\n        }\n        if(this.state.password==''){\n            this.setState({passError:'Please enter password'});\n        }\n        if(this.state.password){\n            let regPas =  /^[a-z0-9]+$/i;\n            if(this.state.password.length > 7){\n                if(!this.state.password.match(/^[a-zA-Z0-9]+$/)){\n                    this.setState({passError:'Please enter valid password'});\n                }\n            }else{\n                this.setState({passError:'Please enter minimum 8 charachter'});\n            }\n        }\n        \n    }\n    handleChange(evt){\n        const value = evt.target.value;\n        this.setState({\n            [evt.target.name]: value\n        });\n        \n    }\n    handleEnter = (event) =>{\n        if (event.keyCode === 13) {\n           this.validateForm();\n        }\n    }\n    render(){\n        return(\n            <div class=\"container register-form\">\n            <div class=\"form\">\n                <div class=\"note\">\n                    <p>Get started today!{this.state.firstName}</p>\n                </div>\n\n                <div class=\"form-content\">\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <div class=\"form-group\">\n                                <label>First Name</label>\n                                <input type=\"text\" name=\"firstName\"   class=\"form-control\" onKeyUp={(e)=>this.handleEnter(e)} value={this.state.firstName} onChange={(e) => this.handleChange(e)} />\n                                <span className=\"errorMsg\">{this.state.firstError}</span>\n                            </div>\n                            <div class=\"form-group\">\n                                <label>Email Address</label>\n                                <input type=\"text\" name=\"email\" class=\"form-control\" onKeyUp={(e)=>this.handleEnter(e)} value={this.state.email}  onChange={(e) => this.handleChange(e)}/>\n                                <span className=\"errorMsg\">{this.state.emailError}</span>\n                            </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"form-group\">\n                            <label>Last Name</label>\n                                <input type=\"text\" name=\"lastName\"  class=\"form-control\" onKeyUp={(e)=>this.handleEnter(e)} value={this.state.lastName}  onChange={(e) => this.handleChange(e)}/>\n                                <span className=\"errorMsg\">{this.state.lastError}</span>\n                            </div>\n                            <div class=\"form-group\">\n                            <label>Password</label>\n                                <input type=\"text\"  name=\"password\" class=\"form-control\" onKeyUp={(e)=>this.handleEnter(e)} value={this.state.password}  onChange={(e) => this.handleChange(e)}/>\n                                <span className=\"errorMsg\">{this.state.passError}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <button type=\"button\" class=\"btnSubmit\" onClick={()=>this.validateForm()}><span>Claim your free trial <img src={'images/caret-right-solid.svg'} /></span></button>\n                    <p className=\"terms\">You are agreeing to our <a href=\"javascript:void(0)\">Terms and Service</a></p>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default RegisterComponent;","import React from 'react';\nimport './App.css';\nimport RegisterComponent from './pages/register/register';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <RegisterComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}